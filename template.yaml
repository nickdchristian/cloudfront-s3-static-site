AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  DefaultLoggingPrefix: !Not
    - !Equals
      - !Ref 'LoggingPrefix'
      - /
  DontUseCustomDomain: !Not
    - !Equals
      - !Ref 'UseCustomDomain'
      - 'true'
  EnabledLogging: !Not
    - !Equals
      - !Ref 'LoggingBucket'
      - ''
  Legacy: !Equals
    - !Ref 'ArchitectureType'
    - legacy
  NoStoreCache: !Equals
    - !Ref 'StoreCache'
    - 'false'
  Redirect: !Equals
    - !Ref 'RedirectFunctionality'
    - 'true'
  SinglePage: !Equals
    - !Ref 'ArchitectureType'
    - spa
  UploadSiteSource: !Equals
    - !Ref 'UploadWebsiteSource'
    - 'true'
  UseCustomDomainName: !Equals
    - !Ref 'UseCustomDomain'
    - 'true'
  UseCustomHeaders: !Equals
    - !Ref 'UseHttpCustomHeaders'
    - 'true'
  UseRoute53: !Equals
    - !Ref 'UseRoute53ForDNS'
    - 'true'
  UseRoute53AndRedirect: !And
    - !Condition 'UseRoute53'
    - !Condition 'Redirect'
Description: Creates a CloudFront distribution with an S3 origin to host a static website.
Outputs:
  BucketArn:
    Description: ARN of the S3 website bucket.
    Value: !GetAtt 'WebsiteBucket.Arn'
  BucketName:
    Description: Name of the S3 website bucket.
    Value: !Ref 'WebsiteBucket'
  CloudFrontUrl:
    Description: HTTPS CloudFront URL for the website
    Value: !Sub 'https://${WebsiteCloudfront.DomainName}'
  WebsiteUrl:
    Condition: UseRoute53
    Description: HTTPS URL For the website through the provided domain name
    Value: !Sub 'https://${DomainName}'
Parameters:
  AcmCertificateArn:
    Description: The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) for your domain name certificate.
    Type: String
  ArchitectureType:
    AllowedValues:
      - spa
      - legacy
      - none
    Default: spa
    Description: Single Page Applications (SPA) can handle their own error responses, as well as default to index.html the end of every path. Legacy has its own error response pages, assumed here to be
      404.html and 4.3.html.
    Type: String
  DomainName:
    Description: The DNS name of the website, such as example.com.
    Type: String
  HostedZoneId:
    Description: The ID of the Hosted Zone of the domain name.
    Type: AWS::Route53::HostedZone::Id
  LoggingBucket:
    Default: ''
    Description: Name of the logging bucket where CloudFront and S3  will reside. If a logging bucket is not specified, logging will be disabled.
    Type: String
  LoggingPrefix:
    AllowedPattern: .*\/$
    Default: /
    Description: An optional string to prefix the log filenames in the logging bucket. S3/ or CloudFront/ will automatically prefix the log filenames, for example S3 bucket  will prefixed as YourPrefix/S3/.
    Type: String
  PriceClass:
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
    Default: PriceClass_All
    Description: The price class for the CloudFront distribution determines what edge locations are utilized and costs. Go to https://aws.amazon.com/cloudfront/pricing/ to learn more about price classes.
      and other CloudFront costs.
    Type: String
  RedirectFunctionality:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: If set to true this redirects all requests from the www subdomain to the base domain. Must have both domains in your ACM certificate. Addtional redirect functionality can be added or changed
      in the RedirectFunction resource.
    Type: String
  StoreCache:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false to not store cache.
    Type: String
  UploadWebsiteSource:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: The custom resource will fail to upload if the website source is too big. Set this to false to disable it.
    Type: String
  UseCustomDomain:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: If there is a custom domain being used with this set, set to true.
    Type: String
  UseHttpCustomHeaders:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Adds several common HTTP security headers to the response from CloudFront. Other headers and CORS may be added to this function too.
    Type: String
  UseRoute53ForDNS:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: If using a DNS service other than Route 53, set to false.
    Type: String
Resources:
  BucketPolicy:
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt 'CloudFrontOriginAccessIdentity.S3CanonicalUserId'
            Resource: !Sub '${WebsiteBucket.Arn}/*'
          - Action: s3:ListBucket
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt 'CloudFrontOriginAccessIdentity.S3CanonicalUserId'
            Resource: !GetAtt 'WebsiteBucket.Arn'
    Type: AWS::S3::BucketPolicy
  CloudFrontOriginAccessIdentity:
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'Access identity for ${WebsiteBucket}'
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  CustomResponseHeadersPolicy:
    Condition: UseCustomHeaders
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub '${AWS::StackName}-CustomHeadersPolicy'
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            ContentSecurityPolicy: default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; frame-ancestors 'none'
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: same-origin
          StrictTransportSecurity:
            AccessControlMaxAgeSec: !If
              - NoStoreCache
              - 0
              - 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true
    Type: AWS::CloudFront::ResponseHeadersPolicy
  IPV4Record:
    Condition: UseRoute53
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'WebsiteCloudfront.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Ref 'DomainName'
      Type: A
    Type: AWS::Route53::RecordSet
  IPV4WwwRecord:
    Condition: UseRoute53AndRedirect
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'WebsiteCloudfront.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Sub 'www.${DomainName}'
      Type: A
    Type: AWS::Route53::RecordSet
  IPV6Record:
    Condition: UseRoute53
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'WebsiteCloudfront.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Ref 'DomainName'
      Type: AAAA
    Type: AWS::Route53::RecordSet
  IPV6WwwRecord:
    Condition: UseRoute53AndRedirect
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'WebsiteCloudfront.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Sub 'www.${DomainName}'
      Type: AAAA
    Type: AWS::Route53::RecordSet
  RedirectFunction:
    Condition: Redirect
    Properties:
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            var host = request.headers.host.value;
            var uri = request.uri;
            var newurl = host.replace('www.','')

            if (host.startsWith('www.')) {
                    var response = {
                    statusCode: 302,
                        statusDescription: 'Found',
                    headers:
                            { "location": { "value": `https://${newurl}${uri}`} }
                    }

                    return response;
            }
            return request;
        }
      FunctionConfig:
        Comment: !Sub 'Handles all redirect logic'
        Runtime: cloudfront-js-1.0
      Name: !Sub '${AWS::StackName}-RedirectFunction'
    Type: AWS::CloudFront::Function
  SiteDeploymentLayer:
    Condition: UploadSiteSource
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2
    Type: AWS::Serverless::Application
  SiteDeploymentResource:
    Condition: UploadSiteSource
    Properties:
      Acl: private
      CacheControlMaxAge: 600
      ServiceToken: !GetAtt 'SiteSource.Arn'
      TargetBucket: !Ref 'WebsiteBucket'
      Version: !Ref 'SiteSource.Version'
    Type: AWS::CloudFormation::CustomResource
  SiteSource:
    Condition: UploadSiteSource
    Properties:
      AutoPublishAlias: live
      CodeUri: web-site/
      Handler: deployer.resource_handler
      Layers:
        - !GetAtt 'SiteDeploymentLayer.Outputs.Arn'
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref 'WebsiteBucket'
      Runtime: python3.8
      Timeout: 600
    Type: AWS::Serverless::Function
  WebsiteBucket:
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration: !If
        - EnabledLogging
        - DestinationBucketName: !Ref 'LoggingBucket'
          LogFilePrefix: !If
            - DefaultLoggingPrefix
            - S3/
            - !Sub '${LoggingPrefix}S3/'
        - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
  WebsiteCloudfront:
    Properties:
      DistributionConfig:
        Aliases: !If
          - UseCustomDomainName
          - - !Ref 'DomainName'
            - !If
              - Redirect
              - !Sub 'www.${DomainName}'
              - !Ref 'AWS::NoValue'
          - !Ref 'AWS::NoValue'
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            PathPattern: /
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses: !If
          - SinglePage
          - - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          - !If
            - Legacy
            - - ErrorCode: 403
                ResponseCode: 403
                ResponsePagePath: /403.html
              - ErrorCode: 404
                ResponseCode: 404
                ResponsePagePath: /404.html
            - !Ref 'AWS::NoValue'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: !If
            - NoStoreCache
            - !Ref 'WebsiteCloudfrontNoCachePolicy'
            - !Ref 'AWS::NoValue'
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          FunctionAssociations:
            - !If
              - Redirect
              - EventType: viewer-request
                FunctionARN: !GetAtt 'RedirectFunction.FunctionMetadata.FunctionARN'
              - !Ref 'AWS::NoValue'
          ResponseHeadersPolicyId: !If
            - UseCustomHeaders
            - !Ref 'CustomResponseHeadersPolicy'
            - !Ref 'AWS::NoValue'
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging: !If
          - EnabledLogging
          - Bucket: !Ref 'LoggingBucket'
            IncludeCookies: false
            Prefix: !If
              - DefaultLoggingPrefix
              - CloudFront/
              - !Sub '${LoggingPrefix}CloudFront/'
          - !Ref 'AWS::NoValue'
        Origins:
          - DomainName: !GetAtt 'WebsiteBucket.DomainName'
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: !Ref 'PriceClass'
        ViewerCertificate:
          AcmCertificateArn: !If
            - UseCustomDomainName
            - !Ref 'AcmCertificateArn'
            - !Ref 'AWS::NoValue'
          CloudFrontDefaultCertificate: !If
            - DontUseCustomDomain
            - true
            - !Ref 'AWS::NoValue'
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: !If
            - UseCustomDomainName
            - sni-only
            - !Ref 'AWS::NoValue'
    Type: AWS::CloudFront::Distribution
  WebsiteCloudfrontNoCachePolicy:
    Condition: NoStoreCache
    Properties:
      CachePolicyConfig:
        DefaultTTL: 0
        MaxTTL: 0
        MinTTL: 0
        Name: !Sub
          - ${AWS::StackName}-NoStoreCachePolicy-${StackId}
          - StackId: !Select
              - 2
              - !Split
                - /
                - !Ref 'AWS::StackId'
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
    Type: AWS::CloudFront::CachePolicy
Transform: AWS::Serverless-2016-10-31
